local self, info = GInterface.CreateInterfaceProvider ("Database", "MySQLOO")local loaded = falsefunction self:ctor ()	self.Database = nil		if not loaded then		require ("mysqloo")		loaded = true	endendfunction self:Connect (server, port, username, password, name, callback)	callback = callback or function () end	if self:IsConnected () then		self:Disconnect (function ()			self:Connect (server, port, username, password, name, callback)		end)		return	end	self.Database = mysqloo.connect (server, username, password, name, port)	function self.Database:onConnected ()		callback (nil)	end	function self.Database:onConnectionFailed (error)		callback (error)	end	self.Database:connect ()endfunction self:Disconnect (callback)	callback = callback or function () end	self.Database = nil	callback (nil)endfunction self:EscapeString (string)	if not self:IsConnected () then		return ""	end	return self.Database:escape (string)endfunction self:GetDatabaseListQuery ()	return "SHOW DATABASES"endfunction self:GetTableListQuery (database)	if database then		return "SHOW TABLES IN " .. database	else		return "SHOW TABLES"	endendfunction self:IsConnected ()	return self.Database ~= nilendfunction self:Query (query, callback)	callback = callback or function () end	if not self:IsConnected () then		callback ("Not connected to database.", nil)		return	end	local q = self.Database:query (query)	function q:onSuccess ()		callback (nil, self:getData ())	end	function q:onFailure (error)		callback (error, nil)	end	function q:onAborted ()		callback ("Query aborted.", nil)	end	q:start ()end
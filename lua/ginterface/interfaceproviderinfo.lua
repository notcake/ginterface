local self = {}GInterface.InterfaceProviderInfo = GInterface.MakeConstructor (self)function self:ctor (interface, name, provider)	self.Interface = interface	self.Name = name	self.Provider = provider	self.ProviderConstructor = GInterface.MakeConstructor (provider)		self.Checked = false	self.LastCreatedInterface = nil		self.Priority = 0	self.Singleton = falseendfunction self:CheckProvider (interface)	self.Checked = true	local definition = GInterface.GetDefinition (self:GetInterfaceName ())	if not definition then		ErrorNoHalt ("GInterface: Definition for " .. self:GetInterfaceName () .. " not found.\n")		return	end	local valid, missing = definition:CheckProvider (interface)	if not valid then		ErrorNoHalt ("GInterface: " .. self.Interface .. "::" .. self.Name .. " is missing " .. tostring (#missing) .. " methods.\n")		for _, v in ipairs (missing) do			ErrorNoHalt ("\t" .. self.Interface .. "::" .. self.Name .. "::" .. v .. "\n")		end	endendfunction self:CreateInterface (...)	if self:IsSingleton () and self.LastCreatedInterface then		return self.LastCreatedInterface	end	local interface = self.ProviderConstructor (...)	GInterface.EventProvider (interface)	self.LastCreatedInterface = interface	if not self.Checked then		self:CheckProvider (interface)	end	return interfaceendfunction self:GetInterfaceName ()	return self.Interfaceendfunction self:GetName ()	return self.Nameendfunction self:GetPriority ()	return self.Priorityendfunction self:IsSingleton ()	return self.Singletonendfunction self:SetPriority (priority)	self.Priority = priorityendfunction self:SetSingleton (singleton)	self.Singleton = singletonend